---
title: "Bayesian GAM Part3"
author: "Murray Logan"
date: today
date-format: "DD/MM/YYYY"
format: 
  html:
    ## Format
    theme: [default, ../resources/ws-style.scss]
    css: ../resources/ws_style.css
    html-math-method: mathjax
    ## Table of contents
    toc: true
    toc-float: true
    ## Numbering
    number-sections: true
    number-depth: 3
    ## Layout
    page-layout: full
    fig-caption-location: "bottom"
    fig-align: "center"
    fig-width: 4
    fig-height: 4
    fig-dpi: 72
    tbl-cap-location: top
    ## Code
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
    code-line-numbers: true
    code-block-border-left: "#ccc"
    code-copy: true
    highlight-style: atom-one
    ## Execution
    execute:
      echo: true
      cache: true
    ## Rendering
    embed-resources: true
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  tbl-title: '**Table**'
  tbl-labels: arabic
engine: knitr
output_dir: "docs"
documentclass: article
fontsize: 12pt
mainfont: Arial
mathfont: LiberationMono
monofont: DejaVu Sans Mono
classoption: a4paper
bibliography: ../resources/references.bib
---

```{r setup, include=FALSE, warnings=FALSE, message=FALSE}
knitr::opts_chunk$set(cache.lazy = FALSE, tidy='styler')
```
 
# Preparations

Load the necessary libraries

```{r}
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

library(tidyverse)  #for data wrangling etc
library(cmdstanr)   #for cmdstan
library(brms)       #for fitting models in STAN
library(standist)   #for exploring distributions
library(coda)       #for diagnostics
library(bayesplot)  #for diagnostics
#library(ggmcmc)     #for MCMC diagnostics
library(DHARMa)     #for residual diagnostics
library(rstan)      #for interfacing with STAN
library(emmeans)    #for marginal means etc
library(broom)      #for tidying outputs
library(tidybayes)  #for more tidying outputs
library(HDInterval) #for HPD intervals
library(ggeffects)  #for partial plots
library(broom.mixed)#for summarising models
library(posterior)  #for posterior draws
library(ggeffects)  #for partial effects plots
library(patchwork)  #for multi-panel figures
library(bayestestR) #for ROPE
library(see)        #for some plots
library(easystats)     #framework for stats, modelling and visualisation
library(mgcv)
library(gratia)
theme_set(theme_grey()) #put the default ggplot theme back
source('helperFunctions.R')
```

```{r}
install.packages("gratia")
```


# Scenario

The Australian Institute of Marine Science (AIMS) have a long-term
inshore marine water quality monitoring program in which water samples
are collected and analysed from sites (reef.alias) across the GBR numerous times 
per year.  The focus of this program is to report long-term condition and change
in water quality parameters.

Although we do have latitude and longitudes, the nature of the spatial design
predominantly reflects a series of transects that start near the mouth of a
major river and extend northwards, yet mainly within the open coastal zone.  As
a result, this design is not well suited to any specific spatial analyses (since
they are mainly one dimensional).

![AIMS water quality monitoring](../resources/AIMS_wq.jpg){#fig-aims width="600" height="325"}


LATITUDE LONGITUDE reef.alias Water_Samples Region Subregion Season waterYear DOC
-------- --------- ---------- ------------- ------ --------- ------ --------- ---
-16.1    145.      Cape Trib… AIMS          Wet T… Barron D… Dry    2008      0.830
-16.1    145.      Cape Trib… AIMS          Wet T… Barron D… Wet    2008      0.100
-16.1    145.      Cape Trib… AIMS          Wet T… Barron D… Dry    2009      0.282
-16.1    145.      Cape Trib… AIMS          Wet T… Barron D… Wet    2009      1.27
-16.1    145.      Cape Trib… AIMS          Wet T… Barron D… Dry    2009      0.793
-16.1    145.      Cape Trib… AIMS          Wet T… Barron D… Dry    2010      0.380
\...     \...      \...       \...          \...   \...      \...   \...      \...

: Format of aims.wq.csv data file {#tbl-aims .table-condensed}

--------------     ---------------------------------------------------------------------
**LATITUDE**       - Latitudinal coordinate
**LONGITUDE**      - Longitudinal coordinate
**reef.alias**     - Internal AIMS reef name
**Water_Samples**  - Categorical label of who collected the data
**Region**         - The MMP region
**Subregion**      - The MMP subregion
**Season**         - A categorical listing of Wet or Dry
**waterYear**      - The water year (1st Oct - 30 Sept) to which the data are attached
**Date**           - The date the sample was collected
**Mnth**           - The month the sample was collected
**DOC**            - Dissolved organic carbon
--------------     ---------------------------------------------------------------------

: Description of the variables in the aims data file {#tbl-aims1 .table-condensed}

# Read in the data

```{r}
#| label: readData
wq <- read_csv("../data/aims.wq1.csv", trim_ws = TRUE)
```

```{r}
# We want to display content change over time.
# Response is DOC.
```


```{r}
wq <- wq |>  mutate(reef.alias = factor(reef.alias),
                    Region = factor(Region),
                    Subregion = factor(Subregion),
                    Season = factor(Season))
wq <- wq |> mutate(Dt.num = decimal_date(Date))
```

```{r}
# We shouldn't use the actual date for the x-axis. They are calculated as how far they are from 01/01/1900 by SECONDS. which is a lot of seconds very big number. To have date on x-axis people use fraction of dates. We are going to create a variable that represents a decimal of the date variable.
```


# Exploratory data analysis


```{r}
glimpse(wq)
```


Model formula:
$$
y_i \sim{} \mathcal{N}(\mu_i, \sigma^2)\\
\mu_i =\beta_0 + f(Date_i) + f(Month_i)
$$

where $\beta_0$ is the y-intercept. $f(Date)$ and $f(Month)$ indicate the additive smoothing functions of the long-term temporal trends and the annual seasonal trends respectively. 


# Data preparations

```{r}
wq |> 
  ggplot(aes(y=DOC, x = waterYear)) +
  geom_point() +
  geom_line() +
  facet_wrap(~Subregion + reef.alias, scale = "free_y")

# Gamma looks good for this it is good for displaying small changes -> and quadratic and cubic wouldnt cover it because the changes in quadratic and cubic are fairly periodic -> can't represent the dynamic changes within this noisy dataset (We chose HighWest to wrangle)
```




# Simple model (High West only)

```{r}
#| label: Isolating High West
wq.sub <- wq |> filter(reef.alias== "High West") |>  droplevels() # we always drop levels when we filter

levels(wq.sub$Region)

wq.sub |> 
ggplot(aes(y = DOC, x = Date)) +
  geom_point() +
  geom_smooth()
```

```{r}
#| label:  Formula

wq.form <- bf(DOC ~ s(Dt.num), family = Gamma(link = 'log')) # s in s(Dt.num) stands for smoother. deviate up of the basis functions.

get_prior(wq.form, data = wq)

#sds ones are penalties for the wigglines -> difficult to come up with these ones. we could make them 1 or  (default is wider x2.5)
wq.sub |> 
  summarise(median(log(DOC)), mad(log(DOC))) # link function is log we need to scale them before summarise them.
```

```{r}
#| label: Set priors

priors <- prior(normal(7,0.13), class = "Intercept") +
  prior(normal(0,1), class = 'b') +
  prior(gamma(0.01, 0.1), class = 'shape') +
  prior(student_t(3,0,1), class = 'sds')
```

```{r}
#| label: Run model

wq.brm2 <- brm(wq.form,
                   data = wq.sub,
                   prior = priors,
                   sample_prior = 'only',
                   iter = 5000,
                   warmup = 1000,
                   chain = 3, cores = 3,
                   thin = 5,
                   refresh = 0,
                   backend = 'cmdstanr'
                   )
```



```{r}
wq.brm2 |> conditional_effects() |> plot(points = TRUE) |> _[[1]] + 
  scale_y_log10()
```

```{r}
#| label: Introduce data

wq.brm3 <- update(wq.brm2, sample_prior = 'yes', adapt_delta = 0.99)
```


```{r}
wq.brm3 |> conditional_effects(spaghetti = TRUE, ndraws = 250) |> plot(points = TRUE) # |> _[[1]] + 
  scale_y_log10()
```

# MCMC sampling diagnostics 

```{r}
wq.brm3$fit |> stan_trace() # set pars so we can have all the interactions and parameters
wq.brm3$fit |> stan_ac()
wq.brm3$fit |> stan_rhat()
wq.brm3$fit |> stan_ess() 
wq.brm3 |>  pp_check(type = 'dens_overlay', ndraws = 250)

wq.resids <- make_brms_dharma_res(wq.brm3, integerResponse = FALSE)
testUniformity(wq.resids)
plotResiduals(wq.resids, quantreg = FALSE)
testDispersion(wq.resids)
plotResiduals(wq.resids)
```


```{r}
wq.brm3 |> summary()

# Intercept represent average DOC
# sDt.num_1 -> wiggliness penalty
# sds(sDt.num_1) -> variance on wiggliness penalty.
```

```{r}
#| label: Region,
wq.form <- bf(DOC ~ s(Dt.num, by = Region), family = Gamma(link = 'log'))
```

```{r}
wq.brm4 <- brm(wq.form,
                   data = wq.sub,
                   prior = priors,
                   sample_prior = 'yes',
                   iter = 5000,
                   warmup = 1000,
                   chain = 3, cores = 3,
                   thin = 5,
                   refresh = 0,
                   backend = 'cmdstanr',
                   control = list(adapt_delta = 0.99, max_treedepth = 20)
                   )
```

```{r}
wq.brm4$fit |> stan_trace() # set pars so we can have all the interactions and parameters
wq.brm4$fit |> stan_ac()
wq.brm4$fit |> stan_rhat()
wq.brm4$fit |> stan_ess() 
wq.brm4 |>  pp_check(type = 'dens_overlay', ndraws = 250)

wq.resids1 <- make_brms_dharma_res(wq.brm4, integerResponse = FALSE)
testUniformity(wq.resids1)
plotResiduals(wq.resids1, quantreg = FALSE)
testDispersion(wq.resids1)
plotResiduals(wq.resids1)
```



```{r}
wq.brm4 |>  conditional_effects(effects = "Dt.num:Season") |>  plot(points = TRUE)
```




```{r}
wq.form <- bf(DOC ~ s(Dt.num) + s(Mnth, bs = 'cc', k =6), # you have to nominate how many knots are maximum, maximum complexity of wigglines. Otherwise it would sample Feb - Nov.
              family = Gamma(link = 'log')) # bs -> cyclical cubic
```


```{r}
wq.brm6 <- brm(wq.form,
                   data = wq.sub,
                   prior = priors,
                   knots = list(Mnth = seq(1,12, len = 6)),
                   sample_prior = 'yes',
                   iter = 5000,
                   warmup = 1000,
                   chain = 3, cores = 3,
                   thin = 5,
                   refresh = 0,
                   backend = 'cmdstanr',
                   control = list(adapt_delta = 0.99, max_treedepth = 20)
                   )
```


```{r}
wq.brm6 |>  conditional_effects(effects = "Dt.num:Mnth") |>  plot(points = TRUE)

wq.brm6 |>  conditional_effects(effects = "Mnth") |>  plot(points = TRUE)
#with emmeans we can select a different time interval and check.
```

```{r}
wq.brm6 |> emmeans(~Dt.num, at =list(Dt.num = c(2010, 2017)), type = 'response') |> 
  pairs()

```


```{r}
#| label: Lets check across all data set not the subset
wq.sub <- wq |> 
  group_by(reef.alias) |> 
  mutate(Min = min(Dt.num)) |> 
  ungroup() |> 
  filter(Min<2012, Region != 'Fitzroy', reef.alias != "Daydream") |> 
  droplevels()

# Fitzroy is excluded because it has some gaps on data, gaps are disasterous for GAMs
```

```{r}
#| label: writing new formula, including reef random effect
wq.form <- bf(DOC ~ s(Dt.num) + (1|reef.alias),
              family = Gamma(link = 'log'))
```

```{r}
#| label: Setting priors for last formula

get_prior(wq.form, data = wq.sub)

priors <- prior(normal(7,0.13), class = "Intercept") +
  prior(normal(0,1), class = 'b') +
  prior(gamma(0.01, 0.01), class = 'shape') +
  prior(student_t(3,0,1), class = 'sds') +
  prior(student_t(3,0,0.15), class = 'sd')

wq.sub |> summarise(mad(log(DOC), na.rm = TRUE))
```


```{r}
wq.brm8 <-brm(wq.form,
                   data = wq.sub,
                   prior = priors,
                   knots = list(Mnth = seq(1,12, len = 6)),
                   sample_prior = 'yes',
                   iter = 5000,
                   warmup = 1000,
                   chain = 3, cores = 3,
                   thin = 5,
                   refresh = 100,
                   backend = 'cmdstanr',
                   control = list(adapt_delta = 0.99, max_treedepth = 20)
                   )
```

```{r}
wq.brm8 |> conditional_effects(effects = "Dt.num") |>  plot(points = TRUE)
```

```{r}
#| label: Fitting Region to the
wq.form <- bf(DOC ~ s(Dt.num, by = Region) + (1|reef.alias),
              family = Gamma(link = 'log'))
```


```{r}
wq.brm9 <-brm(wq.form,
                   data = wq.sub,
                   prior = priors,
                   knots = list(Mnth = seq(1,12, len = 6)),
                   sample_prior = 'yes',
                   iter = 5000,
                   warmup = 1000,
                   chain = 3, cores = 3,
                   thin = 5,
                   refresh = 100,
                   backend = 'cmdstanr',
                   control = list(adapt_delta = 0.99, max_treedepth = 20)
                   )
```




# Model validation 


# Partial effects plots 


# Model investigation 


# Explore more models
# Mixed effects models (all reefs)


# Find peak


# References
